import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';
import jsPDF from 'jspdf';

export interface SpeechExportData {
  title: string;
  content: string;
  metadata?: {
    occasion: string;
    wordCount: number;
    estimatedDuration: string;
    audience: string;
    style: string;
    createdAt: string;
  };
}

export class SpeechExporter {
  static async exportToWord(data: SpeechExportData): Promise<void> {
    try {
      const doc = new Document({
        sections: [{
          properties: {},
          children: [
            // Title
            new Paragraph({
              text: data.title,
              heading: HeadingLevel.TITLE,
              alignment: AlignmentType.CENTER,
              spacing: {
                after: 400,
              },
            }),

            // Metadata section (if provided)
            ...(data.metadata ? [
              new Paragraph({
                text: "Speech Details",
                heading: HeadingLevel.HEADING_2,
                spacing: {
                  before: 200,
                  after: 200,
                },
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: "Occasion: ",
                    bold: true,
                  }),
                  new TextRun({
                    text: data.metadata.occasion,
                  }),
                ],
                spacing: { after: 100 },
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: "Style: ",
                    bold: true,
                  }),
                  new TextRun({
                    text: data.metadata.style,
                  }),
                ],
                spacing: { after: 100 },
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: "Audience: ",
                    bold: true,
                  }),
                  new TextRun({
                    text: data.metadata.audience,
                  }),
                ],
                spacing: { after: 100 },
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: "Word Count: ",
                    bold: true,
                  }),
                  new TextRun({
                    text: `${data.metadata.wordCount} words`,
                  }),
                ],
                spacing: { after: 100 },
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: "Estimated Duration: ",
                    bold: true,
                  }),
                  new TextRun({
                    text: data.metadata.estimatedDuration,
                  }),
                ],
                spacing: { after: 100 },
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: "Created: ",
                    bold: true,
                  }),
                  new TextRun({
                    text: new Date(data.metadata.createdAt).toLocaleDateString(),
                  }),
                ],
                spacing: { after: 400 },
              }),

              // Separator
              new Paragraph({
                text: "Speech Content",
                heading: HeadingLevel.HEADING_2,
                spacing: {
                  before: 400,
                  after: 200,
                },
              }),
            ] : []),

            // Speech content paragraphs
            ...data.content.split('\n\n').map(paragraph => 
              new Paragraph({
                text: paragraph.trim(),
                spacing: {
                  after: 200,
                },
              })
            ),

            // Footer
            new Paragraph({
              text: "Generated by writeaspeech.org",
              alignment: AlignmentType.CENTER,
              spacing: {
                before: 600,
              },
              children: [
                new TextRun({
                  text: "Generated by writeaspeech.org",
                  italics: true,
                  size: 20,
                  color: "666666",
                }),
              ],
            }),
          ],
        }],
      });

      const blob = await Packer.toBlob(doc);
      this.downloadBlob(blob, `${data.title}.docx`);
    } catch (error) {
      console.error('Word export failed:', error);
      throw new Error('Failed to export Word document');
    }
  }

  static async exportToPDF(data: SpeechExportData): Promise<void> {
    try {
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });

      // Set up fonts and styling
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const contentWidth = pageWidth - (margin * 2);
      
      let yPosition = margin;

      // Title
      pdf.setFontSize(20);
      pdf.setFont('helvetica', 'bold');
      const titleLines = pdf.splitTextToSize(data.title, contentWidth);
      pdf.text(titleLines, pageWidth / 2, yPosition, { align: 'center' });
      yPosition += (titleLines.length * 8) + 10;

      // Metadata section
      if (data.metadata) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Speech Details', margin, yPosition);
        yPosition += 8;

        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        
        const metadataItems = [
          `Occasion: ${data.metadata.occasion}`,
          `Style: ${data.metadata.style}`,
          `Audience: ${data.metadata.audience}`,
          `Word Count: ${data.metadata.wordCount} words`,
          `Estimated Duration: ${data.metadata.estimatedDuration}`,
          `Created: ${new Date(data.metadata.createdAt).toLocaleDateString()}`,
        ];

        metadataItems.forEach(item => {
          pdf.text(item, margin, yPosition);
          yPosition += 5;
        });

        yPosition += 10;

        // Content section header
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Speech Content', margin, yPosition);
        yPosition += 10;
      }

      // Speech content
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      
      const paragraphs = data.content.split('\n\n');
      
      paragraphs.forEach(paragraph => {
        if (paragraph.trim()) {
          const lines = pdf.splitTextToSize(paragraph.trim(), contentWidth);
          
          // Check if we need a new page
          if (yPosition + (lines.length * 5) > pageHeight - margin) {
            pdf.addPage();
            yPosition = margin;
          }
          
          pdf.text(lines, margin, yPosition);
          yPosition += (lines.length * 5) + 8;
        }
      });

      // Footer
      if (yPosition + 20 > pageHeight - margin) {
        pdf.addPage();
        yPosition = pageHeight - 30;
      } else {
        yPosition = pageHeight - 30;
      }

      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'italic');
      pdf.text('Generated by writeaspeech.org', pageWidth / 2, yPosition, { align: 'center' });

      // Save the PDF
      pdf.save(`${data.title}.pdf`);
    } catch (error) {
      console.error('PDF export failed:', error);
      throw new Error('Failed to export PDF document');
    }
  }

  static async exportToText(data: SpeechExportData): Promise<void> {
    let content = `${data.title}\n${'='.repeat(data.title.length)}\n\n`;
    
    if (data.metadata) {
      content += `Speech Details:\n`;
      content += `- Occasion: ${data.metadata.occasion}\n`;
      content += `- Style: ${data.metadata.style}\n`;
      content += `- Audience: ${data.metadata.audience}\n`;
      content += `- Word Count: ${data.metadata.wordCount} words\n`;
      content += `- Estimated Duration: ${data.metadata.estimatedDuration}\n`;
      content += `- Created: ${new Date(data.metadata.createdAt).toLocaleDateString()}\n\n`;
      content += `${'='.repeat(50)}\n\n`;
    }
    
    content += data.content;
    content += `\n\n---\nGenerated by writeaspeech.org`;
    
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    this.downloadBlob(blob, `${data.title}.txt`);
  }

  static async exportToCueCards(data: SpeechExportData): Promise<void> {
    // Split content into manageable chunks for cue cards
    const sentences = data.content.split(/[.!?]+/).filter(s => s.trim().length > 0);
    const cards: string[] = [];
    
    // Group 2-3 sentences per card
    for (let i = 0; i < sentences.length; i += 2) {
      const cardContent = sentences.slice(i, i + 2).join('. ').trim() + '.';
      if (cardContent.length > 1) {
        cards.push(cardContent);
      }
    }

    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${data.title} - Cue Cards</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 1rem;
            background: #f5f5f5;
          }
          .page-title {
            text-align: center;
            margin-bottom: 2rem;
            font-size: 1.8rem;
            color: #2c3e50;
            font-weight: bold;
          }
          .cue-cards-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
            max-width: 800px;
            margin: 0 auto;
          }
          .cue-card {
            border: 3px solid #3498db;
            border-radius: 12px;
            padding: 1.5rem;
            min-height: 150px;
            display: flex;
            flex-direction: column;
            background: white;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            page-break-inside: avoid;
          }
          .card-number {
            background: #3498db;
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1rem;
            margin-bottom: 1rem;
            flex-shrink: 0;
          }
          .card-content {
            font-size: 14pt;
            line-height: 1.6;
            flex: 1;
            color: #2c3e50;
          }
          @media print {
            body { 
              padding: 0.5rem; 
              background: white;
            }
            .cue-card { 
              box-shadow: none;
              margin-bottom: 1rem;
            }
            .cue-cards-container {
              gap: 1rem;
            }
          }
        </style>
      </head>
      <body>
        <div class="page-title">${data.title}<br><small style="font-size: 0.7em; color: #7f8c8d;">Practice Cue Cards</small></div>
        <div class="cue-cards-container">
          ${cards.map((card, index) => `
            <div class="cue-card">
              <div class="card-number">${index + 1}</div>
              <div class="card-content">${card}</div>
            </div>
          `).join('')}
        </div>
        <div style="text-align: center; margin-top: 2rem; color: #7f8c8d; font-size: 0.9rem;">
          Generated by writeaspeech.org
        </div>
      </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      printWindow.focus();
      
      // Auto-trigger print dialog after a short delay
      setTimeout(() => {
        printWindow.print();
      }, 1000);
    }
  }

  private static downloadBlob(blob: Blob, filename: string): void {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}
